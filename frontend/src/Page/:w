module Page.Login exposing (Model, Msg(..), view, init, update)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onInput, onClick)
import Http

import Json.Decode as Decode exposing (..)
import Json.Encode as Encode exposing (..)

import ErrorMsg exposing ( buildErrorMsg )

type Msg
    = LoginSetEmail String
    | LoginSetPassword String
    | RegisterSetEmail String
    | RegisterSetNome String
    | RegisterSetMatricula String
    | RegisterSetCurso String
    | RegisterSetPassword String
    | ClickLogin
    | ClickRegister
    | WebRegisterData ( Result Http.Error ( Int ) )
    | WebLoginData ( Result Http.Error ( Int ) )


type alias LoginUser =
    { email : String
    , password : String
    }

type alias RegisterUser =
    { email : String
    , nome : String
    , matricula : String
    , curso : String
    , password : String
    }

type alias Model =
    { loginErrorMsg: Maybe String
    , registerErrorMsg: Maybe String
    , user: Maybe Int
    , loginUser: LoginUser
    , registerUser: RegisterUser
    }


emptyRegisterUser: RegisterUser
emptyRegisterUser = 
    { email = ""
    , nome = ""
    , matricula = ""
    , curso = ""
    , password = ""
    }

emptyLoginUser: LoginUser
emptyLoginUser = 
    { email = ""
    , password = ""
    }

view : Model -> Html Msg
view model =
    div []
        [ div []
            [ h3 [] [text "Login"]
            , viewError model.loginErrorMsg
            , div []
                [ label [ for  "email" ] [text "Email:" ]
                , input [ id "email"
                        , type_ "text"
                        , Html.Attributes.value model.loginUser.email, onInput LoginSetEmail ]
                        []
                ]
            , div []
                [ label [ for  "password" ] [text "Password:" ]
                , input [ id "password"
                        , type_ "password"
                        , Html.Attributes.value model.loginUser.password, onInput LoginSetPassword ]
                        []
                ]
            , div []
                [ button [ onClick ClickLogin ] [ text "Login" ]
                ]
            ]
        
        , div []
            [ h3 [] [text "Register"]
            , viewError model.registerErrorMsg
            , div []
                [ label [ for  "email" ] [text "Email:" ]
                , input [ id "email"
                        , type_ "text"
                        , Html.Attributes.value model.registerUser.email, onInput RegisterSetEmail ]
                        []
                ]
            , div []
                [ label [ for  "nome" ] [text "Nome:" ]
                , input [ id "nome"
                        , type_ "text"
                        , Html.Attributes.value model.registerUser.nome, onInput RegisterSetNome ]
                        []
                ]
            , div []
                [ label [ for  "matricula" ] [text "Matricula:" ]
                , input [ id "matricula"
                        , type_ "text"
                        , Html.Attributes.value model.registerUser.matricula, onInput RegisterSetMatricula ]
                        []
                ]
            , div []
                [ label [ for  "curso" ] [text "Curso:" ]
                , input [ id "curso"
                        , type_ "text"
                        , Html.Attributes.value model.registerUser.curso, onInput RegisterSetCurso ]
                        []
                ]
            , div []
                [ label [ for  "password" ] [text "Password:" ]
                , input [ id "password"
                        , type_ "password"
                        , Html.Attributes.value model.registerUser.password, onInput RegisterSetPassword ]
                        []
                ]
            , div []
                [ button [ onClick ClickRegister ] [ text "Login" ]
                ]
            ]
        ]

viewError : Maybe String -> Html Msg
viewError errorMessage =
    case errorMessage of
        Nothing ->
            div [] []
        Just msg ->
            div []
                [ h3 [] [ text "Fail to login" ]
                , text ("Error: " ++ msg)
                ]


loginUrl : String
loginUrl =
    "http://127.0.0.1:5000/api/user"

registerUrl : String
registerUrl =
    "http://127.0.0.1:5000/api/user/register"

authUserCmd : Model -> Cmd Msg
authUserCmd model =
    Http.request
        { method = "POST"
        , url = loginUrl
        , body = Http.jsonBody (userLoginEncoder model.loginUser)
        , expect = Http.expectJson WebLoginData userIdDecoder
        , headers = []
        , timeout = Nothing
        , tracker = Nothing
        }

registerUserCmd : Model -> Cmd Msg
registerUserCmd model =
    Http.request
        { method = "POST"
        , url = registerUrl
        , body = Http.jsonBody (userRegisterEncoder model.registerUser)
        , expect = Http.expectJson WebRegisterData userIdDecoder
        , headers = []
        , timeout = Nothing
        , tracker = Nothing
        }


userLoginEncoder : LoginUser -> Encode.Value
userLoginEncoder user =
    Encode.object
        [ ("email", Encode.string user.email)
        , ("password", Encode.string user.password)
        ]

userRegisterEncoder : RegisterUser -> Encode.Value
userRegisterEncoder user =
    Encode.object
        [ ("email", Encode.string user.email)
        , ("nome", Encode.string user.nome)
        , ("matricula", Encode.string user.matricula)
        , ("curso", Encode.string user.curso)
        , ("password", Encode.string user.password)
        ]

userIdDecoder : Decoder Int
userIdDecoder =
    Decode.field "user_id" Decode.int


loginUpdateEmail : LoginUser -> String -> LoginUser
loginUpdateEmail user value =
    { user | email = value }

loginUpdatePassword : LoginUser -> String -> LoginUser
loginUpdatePassword user value =
    { user | password = value }

registerUpdateEmail : RegisterUser -> String -> RegisterUser
registerUpdateEmail user value =
    { user | email = value }

registerUpdateNome : RegisterUser -> String -> RegisterUser
registerUpdateNome user value =
    { user | nome = value }

registerUpdateMatricula : RegisterUser -> String -> RegisterUser
registerUpdateMatricula user value =
    { user | matricula = value }

registerUpdateCurso : RegisterUser -> String -> RegisterUser
registerUpdateCurso user value =
    { user | curso = value }

registerUpdatePassword : RegisterUser -> String -> RegisterUser
registerUpdatePassword user value =
    { user | password = value }

update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        LoginSetEmail email ->
            ( { model | loginUser = loginUpdateEmail model.loginUser email },  Cmd.none )

        LoginSetPassword password ->
            ( { model | loginUser = loginUpdatePassword model.loginUser password },  Cmd.none )

        RegisterSetEmail email ->
            ( { model | registerUser = registerUpdateEmail model.registerUser email },  Cmd.none )

        RegisterSetNome nome ->
            ( { model | registerUser = registerUpdateNome model.registerUser nome },  Cmd.none )

        RegisterSetMatricula matricula ->
            ( { model | registerUser = registerUpdateMatricula model.registerUser matricula },  Cmd.none )

        RegisterSetCurso curso ->
            ( { model | registerUser = registerUpdateCurso model.registerUser curso },  Cmd.none )

        RegisterSetPassword password ->
            ( { model | registerUser = registerUpdatePassword model.registerUser password },  Cmd.none )

        ClickLogin ->
            ( model, authUserCmd model)

        ClickRegister ->
            ( model, registerUserCmd model)

        WebLoginData result ->
            case result of 
                Ok user ->
                    ( { model | user = (Just user) } , Cmd.none )
                    
                Err httpError ->
                    ( { model | loginErrorMsg = (Just "Email or Password Invalid" ) }, Cmd.none )

        WebRegisterData result ->
            case result of 
                Ok user ->
                    ( { model | user = (Just user) } , Cmd.none )
                    
                Err httpError ->
                    ( { model | registerErrorMsg = (Just "Fail to register user" ) }, Cmd.none )
                    

init : ( Model, Cmd Msg )
init =
     ({ registerErrorMsg = Nothing
      , loginErrorMsg = Nothing
      , user = Nothing
      , loginUser = emptyLoginUser
      , registerUser = emptyRegisterUser
      }
    , Cmd.none
    )
